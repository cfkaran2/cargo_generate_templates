# See more keys and their definitions at
# https://doc.rust-lang.org/cargo/reference/manifest.html

[package]
name = "{{project-name}}"
version = "{{version}}"
edition = "{{rust_edition}}"
authors = [
    "{{authors}}"
]
description = "{{short_description}}"
readme = "README.md"
license = "Apache-2.0 OR MIT"
keywords = [
]
categories = [
]
publish = false

[badges]
# The `maintenance` table indicates the status of the maintenance of the crate.
# This may be used by a registry, but is currently not used by crates.io. See
# https://github.com/rust-lang/crates.io/issues/2437 and
# https://github.com/rust-lang/crates.io/issues/2438 for more details.
#
# The `status` field is required. Available options are:
# - `actively-developed`: New features are being added and bugs are being
#   fixed.
# - `passively-maintained`: There are no plans for new features, but the
#   maintainer intends to respond to issues that get filed.
# - `as-is`: The crate is feature complete, the maintainer does not intend to
#   continue working on it or providing support, but it works for the purposes
#   it was designed for.
# - `experimental`: The author wants to share it with the community but is not
#   intending to meet anyone's particular use case.
# - `looking-for-maintainer`: The current maintainer would like to transfer the
#   crate to someone else.
# - `deprecated`: The maintainer does not recommend using this crate
#   (the description of the crate can describe why, there could be a better
#   solution available or there could be problems with the crate that the
#   author does not want to fix).
# - `none`: Displays no badge on crates.io, since the maintainer has not chosen
#   to specify their intentions, potential crate users will need to investigate
#   on their own.
maintenance = { status = "none" }

[lints.rust]
absolute_paths_not_starting_with_crate = "warn"
dead_code = "warn"
deprecated_in_future = "warn"
ffi_unwind_calls = "warn"
invalid_reference_casting = "warn"
keyword_idents = "warn"
let_underscore_drop = "warn"
macro_use_extern_crate = "warn"
missing_abi = "warn"
missing_copy_implementations = "warn"
missing_debug_implementations = "warn"
missing_docs = "warn"
non_ascii_idents = "warn"
rust_2021_incompatible_closure_captures = "warn"
rust_2021_incompatible_or_patterns = "warn"
rust_2021_prefixes_incompatible_syntax = "warn"
rust_2021_prelude_collisions = "warn"
single_use_lifetimes = "warn"
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage_nightly)'] }
unreachable_pub = "warn"
unsafe_code = "warn"
unsafe_op_in_unsafe_fn = "warn"
unused_crate_dependencies = "warn"
unused_extern_crates = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"
unused_qualifications = "warn"
unused_results = "warn"

[lints.clippy]
cargo = "warn"
complexity = "warn"
correctness = { level = "deny", priority = 127 }
pedantic = "warn"
perf = "warn"
style = "warn"
suspicious = "warn"

# These are part of the restriction group.  See
# https://rust-lang.github.io/rust-clippy/rust-1.81.0/index.html#/?groups=restriction
# for more information.
allow_attributes = "warn"
allow_attributes_without_reason = "warn"
arithmetic_side_effects = "warn"
clone_on_ref_ptr = "warn"
default_numeric_fallback = "warn"
default_union_representation = "warn"
else_if_without_else = "warn"

[dependencies]
coverage-helper = { version = "^0.2" }
#debug_tree = { version = "^0.4" }
#itertools = "0.13.0"
#log = { version = "^0.4", features = ["kv_serde"] }
#rayon = { version = "^1.10" }
semver = { version = "^1.0" }
thiserror = { version = "^1.0" }

[dev-dependencies]
bolero = { version = "^0.11", features = [
    "arbitrary",
] }
#pretty_env_logger = { version = "^0.5" }

# This profile is required for Bolero to work correctly. See
# https://camshaft.github.io/bolero/library-installation.html for more info.
[profile.fuzz]
inherits = "dev"
opt-level = 3
incremental = false
codegen-units = 1

[profile.release]
opt-level = 3
incremental = false
lto = true
codegen-units = 1
panic = "unwind"

# This is the configuration information for the
# [`cargo release`](https://crates.io/crates/cargo-release) tool
[package.metadata.release]
# allow-branch = ["*", "!HEAD"] # Only for workspaces
# consolidate-commits = false # Only for workspaces
dependent-version = "upgrade"
enable-all-features = false
enable-features = [
]
metadata = "optional"
owners = [
    "{{authors}}"
]
pre-release-commit-message = {% raw -%}"chore(release): Release {{crate_name}} version {{version}}"{%- endraw %}
pre-release-hook = {% raw -%}[
    "git",
    "cliff",
    "-o",
    "CHANGELOG.md",
    "--tag",
    "{{version}}",
]{%- endraw %}
pre-release-replacements = [
]
publish = false
push = true
push-options = [
]
push-remote = "origin"
release = true
sign-commit = true
sign-tag = true
tag = true
tag-message = {% raw -%}"chore(release): Release {{crate_name}} version {{version}}"{%- endraw %}
tag-name = {% raw -%}"{{prefix}}v{{version}}"{%- endraw %}
verify = true
# shared-version = true # Only for workspaces

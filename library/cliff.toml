{%- raw -%}
# [git-cliff][1] default [configuration file][2].
#
#
# Lines starting with "#" are comments. Configuration options are organized
# into tables and keys. See documentation for more information on available
# options.
#
# [1]: https://git-cliff.org
# [1]: https://git-cliff.org/docs/configuration

[changelog]
# changelog header
header = """
# Changelog\n
All notable changes to this project will be documented in this file.\n
"""
# template for the changelog body from https://tera.netlify.app/docs
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {% if commit.breaking %}[**breaking**] {% endif %}{{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""

# remove the leading and trailing whitespace from the template
trim = true

# changelog footer
footer = """
<!-- generated by git-cliff -->
"""

[git]

# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true

# filter out the commits that are not conventional
filter_unconventional = true

# process each line of a commit as an individual commit
split_commits = false

# regex for preprocessing the commit messages
commit_preprocessors = [
    ### Looks for substrings of the form '(issue #34)' and turns them into
    ### strings like 'https://github.com/orhun/git-cliff/issues/34'
    # { pattern = '\((issue\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/issues/${2}))"},

    ### Looks for substrings of the form '(PR #34)' and turns them into
    ### strings like 'https://github.com/orhun/git-cliff/pull/34'
    # { pattern = '\((PR\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/orhun/git-cliff/pull/${2}))"},
]

# regex for parsing and grouping commits
commit_parsers = [
    { message = "^chore", group = "Miscellaneous Tasks" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^doc", group = "Documentation" },
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^perf", group = "Performance" },
    { message = "^refactor", group = "Refactor" },
    { message = "^style", group = "Styling" },
    { message = "^test", group = "Testing" },
    { message = "^WIP", skip = true },
    { body = ".*security", group = "Security" },
]

# protect breaking changes from being skipped due to matching a skipping
# commit_parser
protect_breaking_commits = true

# filter out the commits that are not matched by commit parsers
filter_commits = true

# glob pattern for matching git tags.  This particular pattern matches
# Semantic Versioning 2.0.0 strings using their recommended regular expression.
# See the regular expression at the bottom of https://semver.org/.
tag_pattern = "^(?P<major>0|[1-9]\\d*)\\.(?P<minor>0|[1-9]\\d*)\\.(?P<patch>0|[1-9]\\d*)(?:-(?P<prerelease>(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+(?P<buildmetadata>[0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"

# regex for skipping tags
#skip_tags = ""

# regex for ignoring tags
#ignore_tags = ""

# sort the tags topologically
topo_order = false

# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
{%- endraw %}
